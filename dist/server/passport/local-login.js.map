{"version":3,"sources":["../../../src/server/passport/local-login.js"],"names":["jwt","require","User","model","PassportLocalStrategy","Strategy","module","exports","usernameField","passwordField","session","passReqToCallback","req","email","password","done","userData","trim","findOne","err","user","error","Error","name","comparePassword","passwordErr","isMatch","payload","sub","_id","token","sign","process","env","JWT_SECRET","data"],"mappings":";;AAAA,IAAMA,MAAMC,QAAQ,cAAR,CAAZ;AACA,IAAMC,OAAOD,QAAQ,UAAR,EAAoBE,KAApB,CAA0B,MAA1B,CAAb;AACA,IAAMC,wBAAwBH,QAAQ,gBAAR,EAA0BI,QAAxD;;AAEA;;;AAGAC,OAAOC,OAAP,GAAiB,IAAIH,qBAAJ,CACf;AACEI,iBAAe,OADjB;AAEEC,iBAAe,UAFjB;AAGEC,WAAS,KAHX;AAIEC,qBAAmB;AAJrB,CADe,EAOf,UAACC,GAAD,EAAMC,KAAN,EAAaC,QAAb,EAAuBC,IAAvB,EAAgC;AAC9B,MAAMC,WAAW;AACfH,WAAOA,MAAMI,IAAN,EADQ;AAEfH,cAAUA,SAASG,IAAT;AAFK,GAAjB;;AAKA;AACA,SAAOf,KAAKgB,OAAL,CAAa,EAAEL,OAAOG,SAASH,KAAlB,EAAb,EAAwC,UAACM,GAAD,EAAMC,IAAN,EAAe;AAC5D,QAAID,GAAJ,EAAS;AACP,aAAOJ,KAAKI,GAAL,CAAP;AACD;;AAED,QAAI,CAACC,IAAL,EAAW;AACT,UAAMC,QAAQ,IAAIC,KAAJ,CAAU,6BAAV,CAAd;AACAD,YAAME,IAAN,GAAa,2BAAb;;AAEA,aAAOR,KAAKM,KAAL,CAAP;AACD;;AAED;AACA,WAAOD,KAAKI,eAAL,CAAqBR,SAASF,QAA9B,EAAwC,UAACW,WAAD,EAAcC,OAAd,EAA0B;AACvE,UAAIP,GAAJ,EAAS;AACP,eAAOJ,KAAKI,GAAL,CAAP;AACD;;AAED,UAAI,CAACO,OAAL,EAAc;AACZ,YAAML,SAAQ,IAAIC,KAAJ,CAAU,6BAAV,CAAd;AACAD,eAAME,IAAN,GAAa,2BAAb;;AAEA,eAAOR,KAAKM,MAAL,CAAP;AACD;;AAED,UAAMM,UAAU;AACd;AACAC,aAAKR,KAAKS;AAFI,OAAhB;;AAKA;AACA,UAAMC,QAAQ9B,IAAI+B,IAAJ,CAASJ,OAAT,EAAkBK,QAAQC,GAAR,CAAYC,UAA9B,CAAd;AACA,UAAMC,OAAO;AACXZ,cAAMH,KAAKG;AADA,OAAb;;AAIA,aAAOR,KAAK,IAAL,EAAWe,KAAX,EAAkBK,IAAlB,CAAP;AACD,KAxBM,CAAP;AAyBD,GAtCM,CAAP;AAuCD,CArDc,CAAjB","file":"local-login.js","sourcesContent":["const jwt = require('jsonwebtoken');\nconst User = require('mongoose').model('User');\nconst PassportLocalStrategy = require('passport-local').Strategy;\n\n/**\n * Return the Passport Local Strategy object.\n */\nmodule.exports = new PassportLocalStrategy(\n  {\n    usernameField: 'email',\n    passwordField: 'password',\n    session: false,\n    passReqToCallback: true\n  },\n  (req, email, password, done) => {\n    const userData = {\n      email: email.trim(),\n      password: password.trim()\n    };\n\n    // find a user by email address\n    return User.findOne({ email: userData.email }, (err, user) => {\n      if (err) {\n        return done(err);\n      }\n\n      if (!user) {\n        const error = new Error('Incorrect email or password');\n        error.name = 'IncorrectCredentialsError';\n\n        return done(error);\n      }\n\n      // check if a hashed user's password is equal to a value saved in the database\n      return user.comparePassword(userData.password, (passwordErr, isMatch) => {\n        if (err) {\n          return done(err);\n        }\n\n        if (!isMatch) {\n          const error = new Error('Incorrect email or password');\n          error.name = 'IncorrectCredentialsError';\n\n          return done(error);\n        }\n\n        const payload = {\n          // eslint-disable-next-line no-underscore-dangle\n          sub: user._id\n        };\n\n        // create a token string\n        const token = jwt.sign(payload, process.env.JWT_SECRET);\n        const data = {\n          name: user.name\n        };\n\n        return done(null, token, data);\n      });\n    });\n  }\n);\n"]}