{"version":3,"sources":["../../../src/server/routes/auth.js"],"names":["Router","require","validator","passport","router","validateSignupForm","payload","errors","isFormValid","message","email","isEmail","password","trim","length","name","success","validateLoginForm","post","ctx","next","validationResult","request","body","status","authenticate","err","code","token","userData","user","module","exports"],"mappings":"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","file":"auth.js","sourcesContent":["const Router = require('koa-router');\nconst validator = require('validator');\nconst passport = require('koa-passport');\n\nconst router = new Router();\n\n/**\n * Validate the sign up form\n *\n * @param {object} payload - the HTTP body message\n * @returns {object} The result of validation. Object contains a boolean validation result,\n *                   errors tips, and a global message for the whole form.\n */\nfunction validateSignupForm(payload) {\n  const errors = {};\n  let isFormValid = true;\n  let message = '';\n\n  if (\n    !payload ||\n    typeof payload.email !== 'string' ||\n    !validator.isEmail(payload.email)\n  ) {\n    isFormValid = false;\n    errors.email = 'Please provide a correct email address.';\n  }\n\n  if (\n    !payload ||\n    typeof payload.password !== 'string' ||\n    payload.password.trim().length < 8\n  ) {\n    isFormValid = false;\n    errors.password = 'Password must have at least 8 characters.';\n  }\n\n  if (\n    !payload ||\n    typeof payload.name !== 'string' ||\n    payload.name.trim().length === 0\n  ) {\n    isFormValid = false;\n    errors.name = 'Please provide your name.';\n  }\n\n  if (!isFormValid) {\n    message = 'Check the form for errors.';\n  }\n\n  return {\n    success: isFormValid,\n    message,\n    errors\n  };\n}\n\n/**\n * Validate the login form\n *\n * @param {object} payload - the HTTP body message\n * @returns {object} The result of validation. Object contains a boolean validation result,\n *                   errors tips, and a global message for the whole form.\n */\nfunction validateLoginForm(payload) {\n  const errors = {};\n  let isFormValid = true;\n  let message = '';\n\n  if (\n    !payload ||\n    typeof payload.email !== 'string' ||\n    payload.email.trim().length === 0\n  ) {\n    isFormValid = false;\n    errors.email = 'Please provide your email address.';\n  }\n\n  if (\n    !payload ||\n    typeof payload.password !== 'string' ||\n    payload.password.trim().length === 0\n  ) {\n    isFormValid = false;\n    errors.password = 'Please provide your password.';\n  }\n\n  if (!isFormValid) {\n    message = 'Check the form for errors.';\n  }\n\n  return {\n    success: isFormValid,\n    message,\n    errors\n  };\n}\n\nrouter.post('/signup', (ctx, next) => {\n  const validationResult = validateSignupForm(ctx.request.body);\n  if (!validationResult.success) {\n    ctx.status = 400;\n    ctx.body = {\n      success: false,\n      message: validationResult.message,\n      errors: validationResult.errors\n    };\n    return false;\n  }\n\n  return passport.authenticate('local-signup', err => {\n    if (err) {\n      if (err.name === 'MongoError' && err.code === 11000) {\n        // the 11000 Mongo code is for a duplication email error\n        // the 409 HTTP status code is for conflict error\n        ctx.status = 409;\n        ctx.body = {\n          success: false,\n          message: 'Check the form for errors.',\n          errors: {\n            email: 'This email is already taken.'\n          }\n        };\n        return false;\n      }\n      ctx.status = 400;\n      ctx.body = {\n        success: false,\n        message: 'Could not process the form.'\n      };\n      return false;\n    }\n    ctx.status = 200;\n    ctx.body = {\n      success: true,\n      message: 'You have successfully signed up! Now you should be able to log in.'\n    };\n    return true;\n  })(ctx, next);\n});\n\nrouter.post('/login', (ctx, next) => {\n  const validationResult = validateLoginForm(ctx.request.body);\n  if (!validationResult.success) {\n    ctx.status = 400;\n    ctx.body = {\n      success: false,\n      message: validationResult.message,\n      errors: validationResult.errors\n    };\n    return false;\n  }\n\n  return passport.authenticate('local-login', (err, token, userData) => {\n    if (err) {\n      if (err.name === 'IncorrectCredentialsError') {\n        ctx.status = 400;\n        ctx.body = {\n          success: false,\n          message: err.message\n        };\n        return false;\n      }\n      ctx.status = 400;\n      ctx.body = {\n        success: false,\n        message: 'Could not process the form.'\n      };\n      return false;\n    }\n    ctx.body = {\n      success: true,\n      message: 'You have successfully logged in!',\n      token,\n      user: userData\n    };\n    return true;\n  })(ctx, next);\n});\n\nmodule.exports = router;\n"]}