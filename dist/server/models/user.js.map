{"version":3,"sources":["../../../src/server/models/user.js"],"names":["mongoose","require","bcrypt","UserSchema","Schema","email","type","String","index","unique","password","name","methods","comparePassword","callback","compare","pre","next","user","isModified","genSalt","saltError","salt","hash","hashError","module","exports","model"],"mappings":";;AAAA,IAAMA,WAAWC,QAAQ,UAAR,CAAjB;AACA,IAAMC,SAASD,QAAQ,UAAR,CAAf;;AAEA;AACA,IAAME,aAAa,IAAIH,SAASI,MAAb,CAAoB;AACrCC,SAAO;AACLC,UAAMC,MADD;AAELC,WAAO,EAAEC,QAAQ,IAAV;AAFF,GAD8B;AAKrCC,YAAUH,MAL2B;AAMrCI,QAAMJ;AAN+B,CAApB,CAAnB;;AASA;;;;;;AAMAJ,WAAWS,OAAX,CAAmBC,eAAnB,GAAqC,UAASH,QAAT,EAAmBI,QAAnB,EAA6B;AAChEZ,SAAOa,OAAP,CAAeL,QAAf,EAAyB,KAAKA,QAA9B,EAAwCI,QAAxC;AACD,CAFD;;AAIA;;;AAGAX,WAAWa,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AACpC,MAAMC,OAAO,IAAb;;AAEA;AACA,MAAI,CAACA,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC,OAAOF,MAAP;;AAElC,SAAOf,OAAOkB,OAAP,CAAe,UAACC,SAAD,EAAYC,IAAZ,EAAqB;AACzC,QAAID,SAAJ,EAAe;AACb,aAAOJ,KAAKI,SAAL,CAAP;AACD;;AAED,WAAOnB,OAAOqB,IAAP,CAAYL,KAAKR,QAAjB,EAA2BY,IAA3B,EAAiC,UAACE,SAAD,EAAYD,IAAZ,EAAqB;AAC3D,UAAIC,SAAJ,EAAe;AACb,eAAOP,KAAKO,SAAL,CAAP;AACD;;AAED;AACAN,WAAKR,QAAL,GAAgBa,IAAhB;;AAEA,aAAON,MAAP;AACD,KATM,CAAP;AAUD,GAfM,CAAP;AAgBD,CAtBD;;AAwBAQ,OAAOC,OAAP,GAAiB1B,SAAS2B,KAAT,CAAe,MAAf,EAAuBxB,UAAvB,CAAjB","file":"user.js","sourcesContent":["const mongoose = require('mongoose');\nconst bcrypt = require('bcryptjs');\n\n// define the User model schema\nconst UserSchema = new mongoose.Schema({\n  email: {\n    type: String,\n    index: { unique: true }\n  },\n  password: String,\n  name: String\n});\n\n/**\n * Compare the passed password with the value in the database. A model method.\n *\n * @param {string} password\n * @returns {object} callback\n */\nUserSchema.methods.comparePassword = function(password, callback) {\n  bcrypt.compare(password, this.password, callback);\n};\n\n/**\n * The pre-save hook method.\n */\nUserSchema.pre('save', function(next) {\n  const user = this;\n\n  // proceed further only if the password is modified or the user is new\n  if (!user.isModified('password')) return next();\n\n  return bcrypt.genSalt((saltError, salt) => {\n    if (saltError) {\n      return next(saltError);\n    }\n\n    return bcrypt.hash(user.password, salt, (hashError, hash) => {\n      if (hashError) {\n        return next(hashError);\n      }\n\n      // replace a password string with hash value\n      user.password = hash;\n\n      return next();\n    });\n  });\n});\n\nmodule.exports = mongoose.model('User', UserSchema);\n"]}